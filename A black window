#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <iostream>


const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 600;

void processInput(GLFWwindow *window);
void framebuffer_size_callback(GLFWwindow* window, 
int width, int height);

int main()
{

	//初始化GLFW
	glfwInit();
	if (!glfwInit())
	{
		//初始化失败执行的操作
		std::cout << "Failed to initialize GLFW" << std::endl;
		return -2;
	}


	//告诉GLFW我们需要使用的OpenGL的版本号，本例中使用3.3版本	  
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);//大版本号
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);//小版本号

	//告诉GLFW使用的模式，这里使用的是核心模式
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

	//创建窗口及上下文
	GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "LearnOpenGL", NULL, NULL);
	if (window == NULL)
	{
		//创建窗口失败执行的操作
		std::cout << "Failed to create GLFW window" << std::endl;
		//终止GLFW
		glfwTerminate();
		return -1;
	}

	//将当前窗口设为OpenGL的上下文
	glfwMakeContextCurrent(window);

	//回调函数，当窗口大小发生改变时，使用回调函数重新设置尺寸。
	glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

	//GLAD是用来管理OpenGL的函数指针的，
	//所以在调用任何OpenGL的函数之前我们需要初始化GLAD。
	if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
	{
		std::cout << "Failed to initialize GLAD" << std::endl;
		return -1;
	}

	//检查窗口是否关闭
	while (!glfwWindowShouldClose(window))
	{
		//输入
		processInput(window);

		//如果有渲染指令
		//渲染指令在每次渲染循环迭代的时候都能被执行


		//交换缓冲
		//GLFW在默认情况下使用两个缓冲区。 
		//这意味着每个窗口有两个渲染缓冲区——前缓冲区和后缓冲区。
		//前缓冲区是正在显示的缓冲区，后缓冲区是即将显示的缓冲区。
		//当整个帧已经被渲染时，缓冲器需要彼此交换，
		//因此后缓冲器变为前缓冲器，反之亦然。
		glfwSwapBuffers(window);


		//交换间隔表示交换缓冲区之前等待的帧数，通常称为vsync。
		//默认情况下，交换间隔为0，但因为屏幕每秒只更新60-75次，
		//所以大部分的画面不会被显示。而且，缓冲区有可能在屏幕更新的中间交换，
		//出现屏幕撕裂的情况。
		//所以，可以将该间隔设为1，即每帧更新一次。 它可以设置为更高的值，但这可能导致输入延迟
		glfwSwapInterval(1);




		//事件处理
		//GLFW需要定期与窗口通信，以便接收事件。 
		//事件处理必须在有可见窗口的情况下进行，
		//并且通常在缓冲区交换后每帧执行一次。
		//有两种方法用于处理挂起的事件; 轮询和等待。
		glfwPollEvents();
	}
	

	glfwTerminate();
	return 0;
}


//输入，通过使用GLFW中的几个输入函数，在GLFW中实现一些输入
void processInput(GLFWwindow *window)
{
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		glfwSetWindowShouldClose(window, true);
}

//回调函数
//当窗口大小改变的时候，你可以使用glfwSetFramebufferSizeCallback回调函数重新设置尺寸
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
	glViewport(0, 0, width, height);
}
